{"ast":null,"code":"var _jsxFileName = \"E:\\\\Anand\\\\ccass\\\\frontend\\\\src\\\\Chartdraw.js\";\nimport React from 'react';\nimport ReactChartkick, { LineChart, PieChart } from 'react-chartkick';\nimport Chart from 'chart.js';\nimport DatetimeRangePicker from 'react-bootstrap-datetimerangepicker';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker'; // you will need the css that comes with bootstrap@3. if you are using\n// a tool like webpack, you can do the following:\n\nimport 'bootstrap/dist/css/bootstrap.css'; // you will also need the css that comes with bootstrap-daterangepicker\n\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport Alert from 'react-bootstrap/Alert.js';\nimport { Button } from 'react-bootstrap';\nlet data = [{\n  'name': \"Workout\",\n  'data': {\n    \"2017-01-01\": 5,\n    \"2017-01-02\": 4\n  }\n}, {\n  'name': \"Call parents\",\n  'data': {\n    \"2017-01-01\": 5,\n    \"2017-01-02\": 3\n  }\n}];\ndata = [];\nlet min_max = {};\n\nclass Chartdraw extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleApply = this.handleApply.bind(this);\n    this.handleStockTicker = this.handleStockTicker.bind(this);\n    this.handleGraphData = this.handleGraphData.bind(this);\n    this.state = {\n      'dataingraph': {},\n      startDate: moment().subtract(29, 'days'),\n      endDate: moment(),\n      ranges: {\n        'Today': [moment(), moment()],\n        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n        'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n        'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n      },\n      stockTicker: '',\n      fetchProgress: 'not started'\n    };\n  }\n\n  componentDidMount() {\n    console.log('inside componentdidmount');\n    console.log(this.state.startDate);\n    console.log(this.state.endDate);\n  }\n\n  handleApply(event, picker) {\n    this.setState({\n      startDate: picker.startDate,\n      endDate: picker.endDate\n    });\n    console.log(this.state.startDate.format('YYYY/MM/DD'));\n    console.log(this.state.endDate.format('YYYY/MM/DD'));\n  }\n\n  handleStockTicker(event) {\n    console.log(event);\n    this.setState({\n      stockTicker: event.target.value\n    });\n  }\n\n  handleGraphData(event) {\n    data = [];\n    fetch('/ccass/home', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'startDate': this.state.startDate.format('YYYY/MM/DD'),\n        'endDate': this.state.endDate.format('YYYY/MM/DD'),\n        'stockTicker': this.state.stockTicker\n      })\n    }).then(response => {\n      if (response.ok) {\n        response.json().then(resData => {\n          data = resData;\n\n          for (const data_company of resData) {\n            let company_name = data_company.name;\n            min_max[company_name] = {\n              min: 0,\n              max: 0\n            };\n            var array1 = Object.values(data_company.data);\n            const max_value = Math.max(...array1);\n            const min_value = Math.min(...array1);\n            min_max[company_name].min = min_value;\n            min_max[company_name].max = max_value;\n          }\n\n          this.setState({\n            'dataingraph': resData\n          });\n        });\n      } else {\n        console.log('Something went wrong');\n      }\n    });\n  } //{data.map((object, i) =>\n  //                <LineChart data={[data[6]]} min={144000} max={150000} key={i} />)\n  //            }\n  //<span className=\"input-group-btn\">\n  //                <Button className=\"default date-range-toggle\">\n  //                  <i className=\"fa fa-calendar\"/>\n  //                </Button>\n  //            </span>\n  //<LineChart data={[data[i]]} min={min_max[object.name].min} max={min_max[object.name].max} key={i} />\n  //                   <Button className=\"default date-range-toggle\">Pick your dates\n  //                  <i className=\"fa fa-calendar\"/>\n  //                </Button>\n\n\n  render() {\n    let start = this.state.startDate.format('YYYY/MM/DD');\n    let end = this.state.endDate.format('YYYY/MM/DD');\n    let label = start + ' - ' + end;\n\n    if (start === end) {\n      label = start;\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Shareholding Of Banks\"), React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Stock Ticker: \"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      onChange: this.handleStockTicker,\n      name: \"stockTicker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), this.state.stockTicker === '' && React.createElement(\"label\", {\n      class: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Please enter stockTicker value\")), React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Pick your dates: \"), React.createElement(DatetimeRangePicker, {\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      onApply: this.handleApply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      value: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"input-group-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Alert, {\n      variant: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"default date-range-toggle\",\n      onClick: this.handleGraphData,\n      disabled: this.state.stockTicker == '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Generate graph\")), data.map((object, i) => {\n      return [React.createElement(LineChart, {\n        data: [data[i]],\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(Alert, {\n        variant: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })];\n    }));\n  }\n\n}\n\nexport default Chartdraw;","map":{"version":3,"sources":["E:\\Anand\\ccass\\frontend\\src\\Chartdraw.js"],"names":["React","ReactChartkick","LineChart","PieChart","Chart","DatetimeRangePicker","moment","DateRangePicker","Alert","Button","data","min_max","Chartdraw","Component","constructor","props","handleApply","bind","handleStockTicker","handleGraphData","state","startDate","subtract","endDate","ranges","startOf","endOf","stockTicker","fetchProgress","componentDidMount","console","log","event","picker","setState","format","target","value","fetch","method","headers","body","JSON","stringify","then","response","ok","json","resData","data_company","company_name","name","min","max","array1","Object","values","max_value","Math","min_value","render","start","end","label","map","object","i"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactChartkick, { LineChart, PieChart } from 'react-chartkick';\r\nimport Chart from 'chart.js';\r\nimport DatetimeRangePicker from 'react-bootstrap-datetimerangepicker';\r\nimport moment from 'moment';\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\n// you will need the css that comes with bootstrap@3. if you are using\r\n// a tool like webpack, you can do the following:\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n// you will also need the css that comes with bootstrap-daterangepicker\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\nimport Alert from 'react-bootstrap/Alert.js'\r\n\r\nimport {\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nlet data = [\r\n  {'name': \"Workout\", 'data': {\"2017-01-01\": 5, \"2017-01-02\": 4}},\r\n  {'name': \"Call parents\", 'data': {\"2017-01-01\": 5, \"2017-01-02\": 3}}\r\n]\r\ndata = []\r\nlet min_max = {}\r\nclass Chartdraw extends React.Component {\r\n    constructor(props) {\r\n         super(props);\r\n\r\n         this.handleApply = this.handleApply.bind(this);\r\n         this.handleStockTicker = this.handleStockTicker.bind(this);\r\n         this.handleGraphData = this.handleGraphData.bind(this);\r\n\r\n         this.state = {\r\n             'dataingraph': {},\r\n             startDate: moment().subtract(29, 'days'),\r\n             endDate: moment(),\r\n             ranges: {\r\n                 'Today': [moment(), moment()],\r\n                 'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\r\n                 'Last 7 Days': [moment().subtract(6, 'days'), moment()],\r\n                 'Last 30 Days': [moment().subtract(29, 'days'), moment()],\r\n                 'This Month': [moment().startOf('month'), moment().endOf('month')],\r\n                 'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],\r\n             },\r\n             stockTicker: '',\r\n             fetchProgress: 'not started',\r\n         }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('inside componentdidmount')\r\n        console.log(this.state.startDate)\r\n        console.log(this.state.endDate)\r\n\r\n\r\n\r\n    }\r\n\r\n    handleApply(event, picker) {\r\n    this.setState({\r\n      startDate: picker.startDate,\r\n      endDate: picker.endDate,\r\n    });\r\n    console.log(this.state.startDate.format('YYYY/MM/DD'))\r\n    console.log(this.state.endDate.format('YYYY/MM/DD'))\r\n  }\r\n\r\n  handleStockTicker(event) {\r\n      console.log(event)\r\n      this.setState({stockTicker: event.target.value})\r\n  }\r\n\r\n  handleGraphData(event){\r\n      data = []\r\n      fetch('/ccass/home', {\r\n          method: 'POST',\r\n          headers: {'Content-Type':'application/json'},\r\n          body: JSON.stringify({\r\n              'startDate': this.state.startDate.format('YYYY/MM/DD'),\r\n              'endDate': this.state.endDate.format('YYYY/MM/DD'),\r\n              'stockTicker': this.state.stockTicker\r\n          })\r\n      })\r\n        .then(response =>  {\r\n            if (response.ok) {\r\n                response.json().then(resData => {\r\n                data = resData;\r\n\r\n                for (const data_company of resData) {\r\n                    let company_name = data_company.name;\r\n                    min_max[company_name] = {min: 0, max: 0}\r\n                    var array1 = Object.values(data_company.data)\r\n                    const max_value = Math.max(...array1)\r\n                    const min_value = Math.min(...array1)\r\n                    min_max[company_name].min = min_value\r\n                    min_max[company_name].max = max_value\r\n                }\r\n                this.setState({'dataingraph': resData})\r\n                }\r\n                )\r\n            }\r\n            else {\r\n                console.log('Something went wrong');\r\n            }\r\n            }\r\n        )\r\n\r\n  }\r\n\r\n    //{data.map((object, i) =>\r\n    //                <LineChart data={[data[6]]} min={144000} max={150000} key={i} />)\r\n    //            }\r\n\r\n    //<span className=\"input-group-btn\">\r\n    //                <Button className=\"default date-range-toggle\">\r\n    //                  <i className=\"fa fa-calendar\"/>\r\n    //                </Button>\r\n    //            </span>\r\n\r\n    //<LineChart data={[data[i]]} min={min_max[object.name].min} max={min_max[object.name].max} key={i} />\r\n\r\n    //                   <Button className=\"default date-range-toggle\">Pick your dates\r\n    //                  <i className=\"fa fa-calendar\"/>\r\n    //                </Button>\r\n\r\n    render() {\r\n        let start = this.state.startDate.format('YYYY/MM/DD');\r\n        let end = this.state.endDate.format('YYYY/MM/DD');\r\n        let label = start + ' - ' + end;\r\n        if (start === end) {\r\n            label = start;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Alert variant=\"success\">Shareholding Of Banks</Alert>\r\n                <div className=\"col-md-4\">\r\n                <label>Stock Ticker: </label>\r\n                <input type=\"text\" className=\"form-control\" onChange={this.handleStockTicker} name=\"stockTicker\"/>\r\n                {this.state.stockTicker === '' && <label class=\"text-danger\">Please enter stockTicker value</label>}\r\n                </div>\r\n        <div className=\"col-md-4\">\r\n          <label>Pick your dates: </label>\r\n          <DatetimeRangePicker\r\n            startDate={this.state.startDate}\r\n            endDate={this.state.endDate}\r\n            onApply={this.handleApply}\r\n          >\r\n\r\n            <div className=\"input-group\">\r\n\r\n              <input type=\"text\" className=\"form-control\" value={label}/>\r\n              <span className=\"input-group-btn\">\r\n\r\n                </span>\r\n            </div>\r\n          </DatetimeRangePicker>\r\n        </div>\r\n        <br></br>\r\n        <Alert variant=\"info\">\r\n        <Button className=\"default date-range-toggle\" onClick={this.handleGraphData} disabled={this.state.stockTicker == ''}>Generate graph</Button>\r\n        </Alert>\r\n\r\n                {data.map((object, i) => {\r\n                    return([\r\n                        <LineChart data={[data[i]]} key={i} ></LineChart>,\r\n                        <Alert variant=\"secondary\"></Alert>\r\n                        ]\r\n                        );\r\n                    }\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Chartdraw;"]},"metadata":{},"sourceType":"module"}